{"version":3,"file":"component---src-pages-guides-using-creating-actions-md-df3093459dcaf7c7af1c.js","mappings":"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","sources":["webpack://adobe-io-runtime/./src/pages/guides/using/creating_actions.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"creating-actions\"\n    }}>{`Creating Actions`}</h1>\n    <p>{`For your code to execute as an `}<em parentName=\"p\">{`action`}</em>{` on Adobe I/O Runtime, your code has to comply with two rules:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`You either call your function `}<em parentName=\"li\">{`main`}</em>{` or you export the entry point as `}<em parentName=\"li\">{`main`}</em>{`. This is the function that will be executed when it is invoked.`}</li>\n      <li parentName=\"ul\">{`Your function accepts valid JSON objects as input and produces valid JSON objects as output, if needed`}</li>\n    </ul>\n    <p>{`You have to configure `}<strong parentName=\"p\">{`aio CLI`}</strong>{` on your machine to create and invoke actions. Refer to the `}<a parentName=\"p\" {...{\n        \"href\": \"../tools/cli_install.md\"\n      }}>{`aio CLI`}</a>{` page for how to install and configure it. `}</p>\n    <p>{`Let`}{`’`}{`s assume you have this function available on your machine:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`// this is saved in a file named first-function.js\nfunction main(params) {\n    var nm = params.name || 'stranger';\n    return {payload: 'Hello ' + nm};\n}\n\nexports.main = main;\n`}</code></pre>\n    <p>{`You can create an action called `}<em parentName=\"p\">{`test`}</em>{` using this command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:create test first-function.js\n`}</code></pre>\n    <p>{`You can update an action at any time using the following command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:update test first-function.js\n`}</code></pre>\n    <p>{`If you don`}{`’`}{`t need an action anymore, you can delete it:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:delete test\n`}</code></pre>\n    <p>{`If you want to save an action that is deployed to your machine, then you can use this command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:get test --save \n`}</code></pre>\n    <p>{`Listing all the available actions in your current namespace is as simple as running this command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:list\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"invoking-actions\"\n    }}>{`Invoking actions`}</h2>\n    <p>{`Now, that you have an action, you can call it using the following command (in this example the action name is `}<em parentName=\"p\">{`test`}</em>{`):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:invoke test --result\n`}</code></pre>\n    <p>{`Note the flag `}<em parentName=\"p\">{`--result`}</em>{` used in the command. This flag outputs the result of the invocation. Without it, instead of seeing the result of the invocation, you`}{`’`}{`d get the activation ID. To get the result, you`}{`’`}{`d use this ID to retrieve the result like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:activation:get <activation ID>\n`}</code></pre>\n    <p>{`When you invoke an action, as in the example above, the invocation is not blocking (it is async). If you want to execute it in a blocking style and, as a result, get the activation record instead of just getting an activation ID, you have to add the `}<em parentName=\"p\">{`--blocking`}</em>{` flag to the command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:invoke test --blocking\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"working-with-parameters\"\n    }}>{`Working with parameters`}</h2>\n    <p>{`Actions can receive parameters when are being executed. First, any parameters you sent to the action will be available through the `}<em parentName=\"p\">{`params`}</em>{` variable. If you send two parameters called `}<em parentName=\"p\">{`first-name`}</em>{` and `}<em parentName=\"p\">{`last-name`}</em>{`, they will be available as `}<em parentName=\"p\">{`params.first-name`}</em>{` and `}<em parentName=\"p\">{`params.last-name`}</em>{`.`}</p>\n    <p>{`Second, let`}{`’`}{`s see how you can invoke the action with parameters. Our function sample from above uses a parameter called `}<em parentName=\"p\">{`name`}</em>{`. This is how you can set the parameter when invoking the action:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:invoke test --param name \"John Doe\" --result\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"setting-default-parameters\"\n    }}>{`Setting default parameters`}</h2>\n    <p>{`Sometimes you want to bind the same parameter values for all invocations or you just want to set default values. In either case, you have two different options: setting params at the package level (so all actions in that package can inherit them) or at action level.`}</p>\n    <h3 {...{\n      \"id\": \"default-params-and-encryption\"\n    }}>{`Default params and encryption`}</h3>\n    <p>{`Before we dive deeper in how to set and use default params, let’s discuss the security aspect first. Many developers use the default params as a mechanism to provision actions with the secrets/passwords needed to authenticate against some other systems (databases, services, APIs).`}</p>\n    <p>{`In order to support this use case, all default params are automatically encrypted. They are decrypted just before the action code is executed. Thus, the only time you have access to the decrypted value is while executing the action code.`}</p>\n    <p>{`If you run the CLI command for getting an action or package, you’d get a listing for the names of the default params while the values will be listed as a hash instead of the actual value.`}</p>\n    <h3 {...{\n      \"id\": \"default-parameters-set-on-action\"\n    }}>{`Default parameters set on action`}</h3>\n    <p>{`Let`}{`’`}{`s assume that you want the default value of your parameter to be \"Runtime\". You can set this value when creating the action, or if the action already exists, updating the action. In both cases you add the *--param\" flag:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// creation time\naio rt:action:create test first-function.js --param name \"Runtime\"\n\n// update\naio rt:action:update test first-function.js --param name \"Runtime\"\n`}</code></pre>\n    <p>{`Now, you can run the action without any parameters, and it will use the default one you`}{`’`}{`ve set. If you set a parameter when invoking, this will overwrite the default one.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\">{`Important!  When updating an action's params using `}<inlineCode parentName=\"p\">{`--param <key> <value>`}</inlineCode>{` as above, you must specify ALL of the parameters.  All previous values will be overwritten.`}</p>\n    </blockquote>\n    <h3 {...{\n      \"id\": \"default-parameters-set-on-package\"\n    }}>{`Default parameters set on package`}</h3>\n    <p>{`When you create an action, it is always created in a package. If you don`}{`’`}{`t specify a package, the `}<em parentName=\"p\">{`default`}</em>{` package is used. Similar to how you set default parameters at the action level, you can specify default parameters at the package level.`}</p>\n    <p>{`The difference is that the params set at the package level will be used for all the actions you create in that package.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// creation time\naio rt:package:create my-package --param name \"Runtime\"\n\n// update\naio rt:package:update my-package --param name \"Runtime\"\n`}</code></pre>\n    <p>{`At this point, you might ask yourself what is the precedence when setting parameters at the package level, action level, and invocation time. The winner is parameters set at invocation time, followed by parameters set at action level, and the last is parameters set at package level.`}</p>\n    <h3 {...{\n      \"id\": \"default-parameters-with-parameter-file\"\n    }}>{`Default parameters with parameter file`}</h3>\n    <p>{`A neat way for setting default params is using a dedicated file for storing their values, and then using this file to set those values as default parameter values.`}</p>\n    <p>{`This is especially useful when you are dealing with multiple parameter values for things like configuring API access keys, endpoints, and so on.`}</p>\n    <p>{`Coming back to our sample function that expects one parameter, `}<em parentName=\"p\">{`name`}</em>{`, you`}{`’`}{`d create a JSON file to store that value:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`// filename is my-params.json\n{\n    \"name\": \"Runtime\"\n}\n`}</code></pre>\n    <p>{`Then, you use the `}<em parentName=\"p\">{`--param-file`}</em>{` flag when creating actions, creating packages, or invoking actions.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// update action\naio rt:action:update test first-function.js --param-file my-params.json\n\n// invoke action\naio rt:action:invoke test --param-file my-params.json\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"final-parameters\"\n    }}>{`Final Parameters`}</h3>\n    <p>{`Sometimes, an application needs to ensure that the default parameters are final (or immutable), and a calling client can`}{`’`}{`t override them. You can achieve this by adding the `}<inlineCode parentName=\"p\">{`final`}</inlineCode>{` annotation - `}<inlineCode parentName=\"p\">{`-a final true`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:update test first-function.js --web true --param name \"Runtime\" -a final true\n`}</code></pre>\n    <p>{`This mechanism works for all type of actions including web actions.`}</p>\n    <h2 {...{\n      \"id\": \"invoking-web-actions\"\n    }}>{`Invoking web actions`}</h2>\n    <p>{`So far, we`}{`’`}{`ve been invoking actions only from the CLI. While this might be good for trying out your actions, as you design actions for production systems, you might need to be able to invoke actions via HTTP REST calls. This would enable you to invoke the actions from your web application. `}</p>\n    <p>{`You create a web action by adding the `}<em parentName=\"p\">{`--web`}</em>{` flag to the `}<inlineCode parentName=\"p\">{`aio`}</inlineCode>{` action command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`// creation time\naio rt:action:create test first-function.js --web true\n\n// update\naio rt:action:update test first-function.js --web true\n`}</code></pre>\n    <p>{`Notice the `}<em parentName=\"p\">{`true`}</em>{` value used in the command. If you set that value to `}<em parentName=\"p\">{`false`}</em>{`, then you disable a web action.`}</p>\n    <p>{`To call the action as a web action, you need to know the full path to the action. You can find the path by adding the `}<em parentName=\"p\">{`--url`}</em>{` flag to the action command:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:get test --url\n`}</code></pre>\n    <p>{`This will give you something like:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: got action test\nhttps://adobeioruntime.net/api/v1/web/[your namespace]/default/test\n`}</code></pre>\n    <p>{`In the URL above, the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` in the path stands for the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` package: if you don`}{`’`}{`t create your actions explicitly in a package, then they get under the `}<inlineCode parentName=\"p\">{`default`}</inlineCode>{` package.`}</p>\n    <p>{`You can invoke the action like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl -L https://adobeioruntime.net/api/v1/web/[your namespace]/default/test -X GET\n`}</code></pre>\n    <p>{`or`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`curl https://[your namespace].adobeioruntime.net/api/v1/web/default/test -X GET\n`}</code></pre>\n    <p><strong parentName=\"p\">{`Note`}</strong>{` the change in the URL here in comparison to what the `}<inlineCode parentName=\"p\">{`aio`}</inlineCode>{` returns. This is due some additional protections Runtime provides to segregate namespaces from each other when invoking web actions. The `}<inlineCode parentName=\"p\">{`aio`}</inlineCode>{` generated link will still work but it will return a 308 redirect to your namespace's subdomain on Runtime. For a further discussion of this please see the `}<a parentName=\"p\" {...{\n        \"href\": \"securing_web_actions.md\"\n      }}>{`Securing Web Actions`}</a>{` page.`}</p>\n    <h3 {...{\n      \"id\": \"successful-response\"\n    }}>{`Successful response`}</h3>\n    <p>{`When creating actions to be used as web actions, you might want to send the response that follows the HTTP response structure (status code, headers, body). For example, our sample function could be rewritten:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function main(params) {\n    var nm = params.name || 'stranger';\n    return {\n        statusCode: 200,\n        body: {\n            payload: 'Hello ' + nm\n        }\n    }\n}\n\nexports.main = main;\n`}</code></pre>\n    <p>{`You can also set cookies or cache control headers, perform a HTTP redirect, and so forth.`}</p>\n    <h3 {...{\n      \"id\": \"unsuccessful-response\"\n    }}>{`Unsuccessful response`}</h3>\n    <p>{`On failed action invocations, the error code and message should be wrapped in an `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` object, as this would allow the system to interpret the response as an `}<inlineCode parentName=\"p\">{`applicationError`}</inlineCode>{`. `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`async function main(params) {\n    try {\n        throw new Error(\"Boom!\")\n    } catch (err) {\n        return {\n            error: {\n                statusCode: 500,\n                body: {\n                    payload: \\`Something went wrong: \\${err}\\`\n                }\n            }\n        }\n    }\n}\n\nexports.main = main;\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"dealing-with-errors-in-general\"\n    }}>{`Dealing with errors in general`}</h3>\n    <p>{`It is extremely important to handle errors in your action code. It is actually impossible to recover from an unhandled async error in Node.js. Please refer to the Node.js documentation related to `}<a parentName=\"p\" {...{\n        \"href\": \"https://nodejs.org/api/process.html#event-uncaughtexception\"\n      }}>{`uncaughtExceptions`}</a>{`.`}</p>\n    <p>{`In the event of an unhandled async errors, the action will be terminated and the container running that action will be destroyed. This means that all in flight activations will be failed and, the next invocation of the action will incur the overhead of creating a new container.`}</p>\n    <p>{`The following examples will show incorrect and correct handling of async errors:`}</p>\n    <h4 {...{\n      \"id\": \"incorrect-handling-of-async-errors\"\n    }}>{`Incorrect handling of async errors`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doSomethingAsync() {\n    return new Promise((resolve, reject) => {\n        try {\n            setTimeout(() => {\n                new Error(\"Something went wrong\");\n            }, 1000);\n        } catch (err) {\n            reject(err);\n        }\n    });\n}\n`}</code></pre>\n    <p>{`This code will fail to handle the error and the action will be terminated; here the error is generated not while the executor is running, but later. So the try catch block will not be able to catch the error. `}</p>\n    <h4 {...{\n      \"id\": \"correct-handling-of-async-errors\"\n    }}>{`Correct handling of async errors`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`function doSomethingAsync() {\n    return new Promise((resolve, reject) => {\n        setTimeout(() => {\n            reject(new Error(\"Something went wrong\"));\n        }, 1000);\n    });\n}\n`}</code></pre>\n    <p>{`This code will execute correctly and the error will be handled.     `}</p>\n    <p>{`In general when an asynchronous operation is performed, there is a chance that something could go wrong, such as a network error, a database connection issue, or an unexpected input.\nIf an error occurs but is not handled, the node process will be terminated. Therefore, it is important to always handle errors inside the callback function passed to setTimeout or any other async function to ensure the reliability and stability of the program.`}</p>\n    <h3 {...{\n      \"id\": \"http-context\"\n    }}>{`HTTP context`}</h3>\n    <p>{`When executing an action as a web action, the `}<inlineCode parentName=\"p\">{`params`}</inlineCode>{` object is decorated with additional information:`}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Method`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Description`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`__ow_method`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the HTTP method of the request`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`__ow_headers`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the request headers`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`__ow_path`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the unmatched path of the request (matching stops after consuming the action extension)`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`__ow_body`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the request body entity, as a base64-encoded string when its content is binary or JSON object/array, or as a plain string otherwise`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}><inlineCode parentName=\"td\">{`__ow_query`}</inlineCode></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`the query parameters from the request as an unparsed string`}</td>\n        </tr>\n      </tbody>\n    </table>\n    <p>{`By default, web actions are accessible to anyone who knows the URL. If you want to secure the access, you can find more info on the `}<a parentName=\"p\" {...{\n        \"href\": \"securing_web_actions.md\"\n      }}>{`Securing Web Actions`}</a>{` page.`}</p>\n    <h2 {...{\n      \"id\": \"deploying-zip-actions\"\n    }}>{`Deploying ZIP actions`}</h2>\n    <p>{`So far, we`}{`’`}{`ve been creating actions from a single source file. What if you need to create an action from multiple files and you also need some `}<strong parentName=\"p\">{`npm`}</strong>{` modules? The answer is deploying a ZIP action. `}</p>\n    <p>{`You need to do three things to deploy a ZIP action: create a manifest file, create the package.json file, and configure/use `}<inlineCode parentName=\"p\">{`wskdeploy`}</inlineCode>{` instead of `}<inlineCode parentName=\"p\">{`aio`}</inlineCode>{` for the actual deploy.`}</p>\n    <h3 {...{\n      \"id\": \"wskdeploy\"\n    }}>{`wskdeploy`}</h3>\n    <p>{` If you need to install `}<inlineCode parentName=\"p\">{`wskdeploy`}</inlineCode>{`, check the page `}<a parentName=\"p\" {...{\n        \"href\": \"../tools/wskdeploy_install.md\"\n      }}>{`Setting up the wskdeploy CLI`}</a>{`.`}</p>\n    <h3 {...{\n      \"id\": \"packagejson-file\"\n    }}>{`Package.json file`}</h3>\n    <p>{`You use the package.json file to specify the dependencies. If you don`}{`’`}{`t have one already, in the same folder where your function files are, run `}<inlineCode parentName=\"p\">{`npm init -y`}</inlineCode>{`.`}</p>\n    <p>{`Make sure you have the npm dependencies you need for your functions declared in the package file.`}</p>\n    <h3 {...{\n      \"id\": \"wskdeploy-manifest-file\"\n    }}>{`wskdeploy manifest file`}</h3>\n    <p>{`The last step is creating the manifest file that will be used by wskdeploy to create your action. In the parent folder of the folder where you have your function files and npm modules, create a file `}<inlineCode parentName=\"p\">{`manifest.yaml`}</inlineCode>{`. (For more information on YAML format, see the `}<a parentName=\"p\" {...{\n        \"href\": \"http://yaml.org/refcard.html\"\n      }}>{`YAML reference card`}</a>{`.)`}</p>\n    <p>{`This is the folder structure:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`--/actions\n--/actions/node_modules/\n--/actions/index.js\n--/actions/package.json\n--manifest.yaml\n`}</code></pre>\n    <p>{`Here is an example manifest.yaml:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`packages:\n    # this is the package name\n    test:\n        actions:\n            # name of the action\n            test-zip:\n                # source for the action; in this case it is a folder\n                function: actions\n                runtime: nodejs:10\n                # publish the action as a web action\n                web:  yes\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` If your action require dependencies (such as other node modules or JavaScript files), you need to place the action code in a `}<inlineCode parentName=\"p\">{`index.js`}</inlineCode>{` file and in the `}<inlineCode parentName=\"p\">{`manifest.yaml`}</inlineCode>{` file, the `}<inlineCode parentName=\"p\">{`function`}</inlineCode>{` value should point to the folder where the action is stored instead of the action file. You can see this in action in the example above.`}</p>\n    </blockquote>\n    <p>{`Now you are ready to deploy by running the `}<inlineCode parentName=\"p\">{`wskdeploy`}</inlineCode>{` command from the same folder where `}<inlineCode parentName=\"p\">{`manifest.yaml`}</inlineCode>{` is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wskdeploy\n`}</code></pre>\n    <p>{`This should deploy an action called `}<em parentName=\"p\">{`test-zip`}</em>{` under a package called `}<em parentName=\"p\">{`test`}</em>{`. You can invoke it like this:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:action:invoke test/test-zip --result\n`}</code></pre>\n    <p>{`If you want to remove this action, you run `}<inlineCode parentName=\"p\">{`wskdeploy`}</inlineCode>{` with the `}<em parentName=\"p\">{`undeploy`}</em>{` flag:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wskdeploy undeploy\n`}</code></pre>\n    <p>{`There are other useful flows `}<inlineCode parentName=\"p\">{`wskdeploy`}</inlineCode>{` supports. Please check the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/openwhisk-wskdeploy\"\n      }}>{`official documentation`}</a>{` if you want to find more.`}</p>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Note:`}</strong>{` There is another way of deploying a ZIP action using the aio command. You miss the manifest.yaml file flexibility with this mode; you can`}{`’`}{`t define multiple actions/packages at the same time. The ZIP file has to have in the root the package.json file.`}<br parentName=\"p\"></br>{`\n`}<inlineCode parentName=\"p\">{`aio rt:action:create my-action --kind nodejs:20 zip-file.zip`}</inlineCode></p>\n    </blockquote>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}