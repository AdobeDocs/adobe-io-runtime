{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/using/logging_monitoring.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,0BADR,2BAGA,0BAAW,uBAAYC,WAAW,KAAvB,OAAX,6GACA,yFACA,qBAAK,iBAAMA,WAAW,OAAjB,2BAEL,+FACA,qBAAK,iBAAMA,WAAW,OAAjB,0CAEL,wEAAyD,uBAAYA,WAAW,KAAvB,iBAAzD,mGAAuN,uBAAYA,WAAW,KAAvB,QAAvN,qDACA,qBAAK,iBAAMA,WAAW,OAAjB,oIAIL,eACE,GAAM,wDADR,yDAGA,sPACA,uNAEA,sLAAuK,uBAAYA,WAAW,KAAvB,MAAvK,OACA,qBAAK,iBAAMA,WAAW,OAAjB,8BAEL,4BACE,cAAGA,WAAW,cAAd,qIAEF,eACE,GAAM,iCADR,kCAGA,mNAAoM,uBAAYA,WAAW,KAAvB,qCAApM,yCACA,gFAAiE,uBAAYA,WAAW,KAAvB,SAAjE,QAA0H,uBAAYA,WAAW,KAAvB,mBAA1H,MACA,oBACE,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,WAApB,0CACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,0BAApB,8LACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,qBAApB,2IACA,eAAIA,WAAW,OAAK,uBAAYA,WAAW,MAAvB,wBAApB,gHAAqM,uBAAYA,WAAW,MAAvB,mCAEvM,eACE,GAAM,mBADR,oBAGA,+NACA,gMACA,+DAAgD,cAAGA,WAAW,IAC1D,KAAQ,2FADoC,WAAhD,kPAEsQ,cAAGA,WAAW,IAChR,KAAQ,8GAD0P,SAFtQ,aAI+B,cAAGA,WAAW,IACzC,KAAQ,uDADmB,sBAJ/B,gCAOA,eACE,GAAM,qBADR,sBAGA,iCAAkB,cAAGA,WAAW,IAC5B,KAAQ,gBADM,QAAlB,6DAOJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-using-logging-monitoring-md-f801436cb1ddaaafbe7e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"logging-and-monitoring\"\n    }}>{`Logging and Monitoring`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`wsk`}</inlineCode>{` CLI offers a number of tools you can use to debug your actions while running them on Adobe I/O Runtime.`}</p>\n    <p>{`You can retrieve the latest activations in a namespace by running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation list\n`}</code></pre>\n    <p>{`Having an activation ID, you can retrieve the activation result running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation get <activation ID>\n`}</code></pre>\n    <p>{`If you send data to logs from your actions (using `}<inlineCode parentName=\"p\">{`console.log()`}</inlineCode>{` in your code), you`}{`’`}{`ll get this information as part of the activation record, inside the `}<inlineCode parentName=\"p\">{`logs`}</inlineCode>{` field. The shortcut command to get the logs is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation logs <activation ID>\n//output sample\n2018-11-14T22:23:00.002Z       stdout: 1542234180001: param = John Doe\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"retrieving-activations-for-blocking-successful-calls\"\n    }}>{`Retrieving Activations for Blocking Successful Calls`}</h1>\n    <p>{`At scale, when you run millions of activations in a day, it may be difficult to extract the activations that failed in order to debug them. To help with this task, the system skips persisting the activation that succeeded. `}</p>\n    <p>{`The exceptions are asynchronous actions that are invoked in a non-blocking fashion. Their results are persisted regardless\nso that you can extract the response of the action at a later time. `}</p>\n    <p>{`However, during development it is important to have access to all activation results. You can enable this by setting in the request the extra logging header to `}<inlineCode parentName=\"p\">{`on`}</inlineCode>{`: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`X-OW-EXTRA-LOGGING: on\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It's not recommended to use the extra logging headers in the production environment as invocation performance can be impacted. `}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"understanding-the-error-codes\"\n    }}>{`Understanding The Error Codes`}</h2>\n    <p>{`When you have action invocations that fail, sometimes the best way to understand the reason behind the failing is to take a look at the error object part of the activation record - running `}<inlineCode parentName=\"p\">{`wsk activation get <activationId>`}</inlineCode>{` you will get the activation record.`}</p>\n    <p>{`The following are the possible values and the meaning for `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`response.status`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`success`}</inlineCode>{`: everything is okay (status is true)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`action developer error`}</inlineCode>{`: A container or action code error occurred, e.g. failed to start action (status is false). This is usually the case if the nodejs action code has a syntax error or missing dependencies`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`application error`}</inlineCode>{`: Action ran, but there was an error thrown in the action code (deliberatly or not) that was handled by I/O Runtime (status is false).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`whisk internal error`}</inlineCode>{`: Action did not run, an internal I/O Runtime system error occurred while starting the action, more info in `}<inlineCode parentName=\"li\">{`response.status.result.error`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"3rd-party-tools\"\n    }}>{`3rd-Party Tools`}</h2>\n    <p>{`I/O Runtime doesn’t offer a configuration to send activations and logs to an external system, something like Splunk, Datadog or New Relic. This is something we are considering to offer in the future. `}</p>\n    <p>{`Although there is no out-of-the-box integration, there are still ways you can push data from I/O Runtime to an external tool in order to monitor and debug your actions. `}</p>\n    <p>{`One tool that made it easy to do this is `}<a parentName=\"p\" {...{\n        \"href\": \"https://epsagon.com/?utm_source=adobe.io&utm_medium=referral&utm_campaign=adobe_io_docs\"\n      }}>{`Epsagon`}</a>{`. Epsagon built an integration for OpenWhisk based systems (I/O Runtime is built on top of the open source project OpenWhisk) that makes super easy to see your activations, errors, latency information and logs in their system. Check this `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.epsagon.com/docs/openwhisk?utm_source=adobe.io&utm_medium=referral&utm_campaign=adobe_io_docs\"\n      }}>{`guide`}</a>{` or this `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=4iprbivqrxQ&t=1517s\"\n      }}>{`video presentation`}</a>{` if you want to find more. `}</p>\n    <h2 {...{\n      \"id\": \"debugging-locally\"\n    }}>{`Debugging Locally`}</h2>\n    <p>{`Check this `}<a parentName=\"p\" {...{\n        \"href\": \"debugging.md\"\n      }}>{`page`}</a>{` if you want to learn how to debug your actions locally.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}