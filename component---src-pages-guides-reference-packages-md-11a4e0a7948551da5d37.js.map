{"version":3,"file":"component---src-pages-guides-reference-packages-md-11a4e0a7948551da5d37.js","mappings":"sRAMaA,EAAe,CAAC,EACvBC,EAAc,CAClBD,aAAAA,GAEIE,EAAYC,EAAAA,EACH,SAASC,EAAUC,GAG/B,IAFDC,EAAUD,EAAVC,WACGC,GAAKC,EAAAA,EAAAA,GAAAH,EAAAI,GAER,OAAOC,EAAAA,EAAAA,KAACR,GAASS,EAAAA,EAAAA,GAAA,GAAKV,EAAiBM,EAAK,CAAED,WAAYA,EAAYM,QAAQ,eAG5EF,EAAAA,EAAAA,KAAA,MACE,GAAM,yBAAuB,0BAE/BA,EAAAA,EAAAA,KAAA,gWACAA,EAAAA,EAAAA,KAAA,2CACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,+CAE3BH,EAAAA,EAAAA,KAAA,mIACAA,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,8CAE3BH,EAAAA,EAAAA,KAAA,qMAA+LA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,QAAsB,4BAA4BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,MACjUH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,wEAE3BH,EAAAA,EAAAA,KAAA,sHAAgHA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,UAAwB,MAClKH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,6DAE3BH,EAAAA,EAAAA,KAAA,+GAAyGA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,oBAAkC,yBAAyBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,8GACpPH,EAAAA,EAAAA,KAAA,YAAKA,EAAAA,EAAAA,KAAA,QAAMG,WAAW,OAAK,6FAE3BH,EAAAA,EAAAA,KAAA,MACE,GAAM,mCAAiC,oCAEzCA,EAAAA,EAAAA,KAAA,qCAA+BA,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,gBAA8B,+HAA+HH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,cAA4B,kBAAkBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,KAAmB,uDAAuDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,KAAG,KAAmB,wCAC/aH,EAAAA,EAAAA,KAAA,WACEA,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,aAAcH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,cAA4B,4BAA4BH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,KAAmB,QAAQH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,KAAmB,eACxNH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,kBAAmBH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,cAA4B,oDAAoDH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,KAAmB,eAC/LH,EAAAA,EAAAA,KAAA,MAAIG,WAAW,MAAI,WAAYH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,cAA4B,+DAA+DH,EAAAA,EAAAA,KAAA,cAAYG,WAAW,MAAI,OAItL,CAEAT,EAAWU,gBAAiB,C","sources":["webpack://adobe-io-runtime/./src/pages/guides/reference/packages.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"working-with-packages\"\n    }}>{`Working with packages`}</h1>\n    <p>{`Packages are a simple and yet important concept in I/O Runtime. You can use packages to handle versioning (deploy new version of your actions in a new package), create different actions with the same name within the same namespace, group together actions that are related, share actions with other parties (shared packages) and much more.`}</p>\n    <p>{`You create a package running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:package:create my-fancy-package \n`}</code></pre>\n    <p>{`When deleting an package, it will only work if the package is empty (no actions or triggers have been defined in it):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`aio rt:package:delete my-fancy-package\n`}</code></pre>\n    <p>{`Another useful feature is defining default params at the package level. All the actions defined in that package will be able to read the default params. In this example a param called `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` is set, with the value `}<inlineCode parentName=\"p\">{`some-value`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ aio rt:package:update my-fancy-package --param name some-value\n`}</code></pre>\n    <p>{`Sharing a package (making it available to any other user of the system) is as simple as adding this flag `}<inlineCode parentName=\"p\">{`shared`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ aio rt:package:update my-fancy-package --shared yes\n`}</code></pre>\n    <p>{`If you want to use a shared package, you need first to bind it. In the following example, we bind `}<inlineCode parentName=\"p\">{`my-fancy-package`}</inlineCode>{` to a package called `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{`. This enables you to invoke any action defined in the original namespace as being part of bound package.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ aio rt:package:bind /namespace-where-package-is-defined/my-fancy-package my-package\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shared-packages-and-permissions\"\n    }}>{`Shared Packages and Permissions`}</h2>\n    <p>{`Shared packages enforce `}<inlineCode parentName=\"p\">{`execute-only`}</inlineCode>{` permission for any operation that is initiated from outside the namespace owning the package. Assuming there is a package `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{` in namespace `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{`, this package is shared, and there is a namespace `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{` who uses the shared package, then:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Invoking `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` actions from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`a`}</inlineCode>{` will work`}</li>\n      <li parentName=\"ul\">{`Trying to get `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` code or edit it (update/delete) from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` will fail`}</li>\n      <li parentName=\"ul\">{`Manage `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` (create/read/update/delete) will only work from namespace `}<inlineCode parentName=\"li\">{`a`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}