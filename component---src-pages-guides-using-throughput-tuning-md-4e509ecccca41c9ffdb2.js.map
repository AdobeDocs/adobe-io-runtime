{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/using/throughput_tuning.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","isMDXComponent"],"mappings":"4OAUsBA,E,wEAFTC,EAAe,GAOtBC,GALgBF,EAKY,cALJ,SAA6BG,GAEzD,OADAC,QAAQC,KAAK,aAAeL,EAAO,4EAC5B,eAASG,KAIZG,EAAc,CAClBL,gBAEIM,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGP,GACF,YACD,OAAO,SAACI,GAAD,UAAeD,EAAiBH,EAAhC,CAAuCO,WAAYA,EAAYC,QAAQ,eAG5E,eACE,GAAM,qBADR,sBAGA,uKAAwJ,uBAAYC,WAAW,KAAvB,gCAAxJ,8LACA,2CAA4B,uBAAYA,WAAW,KAAvB,OAA5B,yIAAoN,uBAAYA,WAAW,KAAvB,cAApN,2FAAqW,uBAAYA,WAAW,KAAvB,OAArW,4FACA,2MACA,oDAAqC,uBAAYA,WAAW,KAAvB,KAArC,SAA2F,uBAAYA,WAAW,KAAvB,OAA3F,gDAA0L,uBAAYA,WAAW,KAAvB,OAA1L,MACA,qBAAK,iBAAMA,WAAW,OAAjB,uDAEL,2DACA,oBACE,eAAIA,WAAW,MAAf,iLACA,eAAIA,WAAW,MAAf,iJAAqK,uBAAYA,WAAW,MAAvB,OAArK,0EACA,eAAIA,WAAW,MAAf,gLACA,eAAIA,WAAW,MAAf,uQACA,eAAIA,WAAW,MAAf,kKACA,eAAIA,WAAW,MAAf,8GAEF,eACE,GAAM,+DADR,gEAGA,0LAA2K,uBAAYA,WAAW,KAAvB,SAA3K,MAAkO,uBAAYA,WAAW,KAAvB,SAAlO,SAA4R,uBAAYA,WAAW,KAAvB,UAA5R,sDACA,uZACA,eACE,GAAM,qBADR,sBAGA,uZACA,+JAAgJ,uBAAYA,WAAW,KAAvB,cAAhJ,uDAA6P,uBAAYA,WAAW,KAAvB,gBAA7P,QAA6T,uBAAYA,WAAW,KAAvB,iBAA7T,kEACA,qBAAK,iBAAMA,WAAW,OAAjB,yKAUL,iIACA,qBAAK,iBAAMA,WAAW,OAAjB,uBAEL,SAACV,EAAD,CAAaW,MAAM,OAAOF,QAAQ,iBAClC,yEAA0D,uBAAYC,WAAW,KAAvB,oBAA1D,uFAKJH,EAAWK,gBAAiB","file":"component---src-pages-guides-using-throughput-tuning-md-4e509ecccca41c9ffdb2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"throughput-tuning\"\n    }}>{`Throughput Tuning`}</h1>\n    <p>{`The main instrument you can use for tuning how a given action is executed and enable a faster number of executions, is the value you set for the `}<inlineCode parentName=\"p\">{`action/container concurrency`}</inlineCode>{`. This value is not related to the concurrent value per namespace or minuteRate value, though these two enforce the upper limit for actions executed per minute your namespace can reach.`}</p>\n    <p>{`The default value is `}<inlineCode parentName=\"p\">{`200`}</inlineCode>{` and it means that 200 invocation can happen in the same container for the that action. Suppose that you want to execute 100 times a `}<inlineCode parentName=\"p\">{`HelloWorld`}</inlineCode>{` action at the same time or in short period of time (minutes). With the default value (`}<inlineCode parentName=\"p\">{`200`}</inlineCode>{`) it means that the system will use 1  container instead of using up to 100 containers.`}</p>\n    <p>{`This enables you to avoid cold-start issues. When the system doesn't have any containers left, it has to create new ones. This cold-start adds a lot of latency to your application.`}</p>\n    <p>{`You can set any value between `}<inlineCode parentName=\"p\">{`1`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`500`}</inlineCode>{`. In the example below, the limit is set to `}<inlineCode parentName=\"p\">{`100`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk action create actionName fileName.js -c 100\n`}</code></pre>\n    <p>{`Some considerations to keep in mind:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`A container is kept warm after an invocation finished for 10 minutes. This means that for 10 minutes you can be 99% you don't get cold-starts when executing the same action`}</li>\n      <li parentName=\"ol\">{`Depending on how much memory/resources your action consumes, you can use a smaller or a higher value. A good average number to start with is `}<inlineCode parentName=\"li\">{`200`}</inlineCode>{`. You should experiment to make sure the value you choose is working `}</li>\n      <li parentName=\"ol\">{`Make sure that your code is working when being executed in parallel. Using global variables to store values that are different between invocations is a recipe for disaster`}</li>\n      <li parentName=\"ol\">{`If your Action works on some large data that is not different between invocations, then using a global variable can maximize the chances that the next execution can reuse it. However your code should handle the situation where the variable is not initialized`}</li>\n      <li parentName=\"ol\">{`It is not guarantee that all invocations will use the same container. In case of errors, the existing container is destroyed and a new container will be used`}</li>\n      <li parentName=\"ol\">{`In cases where your action code is memory hungry, you might need to tweak this setting to a lower value `}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"using-pre-warm-containers-or-optimizing-against-cold-starts\"\n    }}>{`Using pre-warm containers or optimizing against cold-starts`}</h2>\n    <p>{`A second way for maximizing your chances of having the best low latency possible is creating actions that use the default Node version and a memory setting that is `}<inlineCode parentName=\"p\">{`256MB`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`512MB`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`1024MB`}</inlineCode>{` - this way you avoid cold-starts in most cases. `}</p>\n    <p>{`The system has a pool of containers with these settings waiting to be used for any incoming call that can't be sent to an existing running container and the action matches the container settings (Node version and memory setting). In this scenario, time will only be spent for injecting your action code as opposed to wait for creating a container first and then get the code injected.`}</p>\n    <h2 {...{\n      \"id\": \"caching-responses\"\n    }}>{`Caching Responses`}</h2>\n    <p>{`The second instrument you have to maximize throughput is caching the action response. When you cache an action response, for the time the cache is valid, you can invoke the action without increasing the counter used by minuteRate or concurrent action invocations per namespace. In this situations, your action is not actually executed, instead the system serves the result from cache.`}</p>\n    <p>{`You use the Cache-Control dirrective in order to configure the cache. Below is an example of an action that sets the cache with a TTL of `}<inlineCode parentName=\"p\">{`30 minutes`}</inlineCode>{`. In the response object you'll find an entry with `}<inlineCode parentName=\"p\">{`X-Cache: HIT`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`X-Cache: MISS`}</inlineCode>{` (depending on the answer being returned from cache or not). `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`function main(args) {\n   return {\n       body: \"OK\",\n       statusCode: 200,\n       headers: {\n           \"Cache-Control\": \"max-age=1800\"\n       }\n   }\n}\n`}</code></pre>\n    <p>{`One way to verify if a response is returned from the cache or not is by checking for the following header:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`X-GW-Cache: HIT\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Encoded responses can't be cached, this means that `}<inlineCode parentName=\"p\">{`Content-Encoding`}</inlineCode>{` response header needs to be always empty in order for the response to be cached. `}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}