{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/using/using_packages.md"],"names":["name","_frontmatter","InlineAlert","props","console","warn","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","mdxType","parentName","slots","isMDXComponent"],"mappings":"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","file":"component---src-pages-guides-using-using-packages-md-17fe55574e6e32659d82.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst InlineAlert = makeShortcode(\"InlineAlert\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-packages-with-adobe-io-runtime\"\n    }}>{`Using Packages with Adobe I/O Runtime`}</h1>\n    <p>{`Individual actions (functions) can be effective, but often you`}{`’`}{`ll need to create a set of actions that interact with each other; and you may wish to make those available to other developers as well. The means to do this in Runtime are called `}<em parentName=\"p\">{`packages.`}</em></p>\n    <p>{`Packages bundle related actions together. More than that, packages can contain both actions and `}<em parentName=\"p\">{`feeds:`}</em>{` streams of events. Feeds are created by `}<em parentName=\"p\">{`feed actions`}</em>{` that specify the trigger to fire for a given event source; each time the event is received, the selected trigger is fired and the associated action is executed. For more information, see `}<a parentName=\"p\" {...{\n        \"href\": \"../reference/feeds.md\",\n        \"title\": \"Using Feeds\"\n      }}>{`Using Feeds`}</a>{`.`}</p>\n    <p>{`Everything you access in Runtime exists within a namespace. Your namespace is given to you when you sign up for Runtime access (see `}<a parentName=\"p\" {...{\n        \"href\": \"../gettingstarted.md\",\n        \"title\": \"Getting started\"\n      }}>{`Getting Started with Adobe I/O Runtime`}</a>{`). So, actions you create in Runtime, and packages as well, are stored in your namespace. Other users of Runtime get their own namespaces, and `}<strong parentName=\"p\">{`Runtime includes a system namespace in which certain packages are stored available to all users.`}</strong></p>\n    <h2 {...{\n      \"id\": \"creating-packages\"\n    }}>{`Creating packages`}</h2>\n    <p>{`Packages not only bundle actions and feeds; they provide the means to share a common set of parameters across all entities in the package. Creating a package is simple. You can create a package in the Runtime CLI in one step:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package create hellopackage`}</inlineCode></p>\n    <p>{`This creates a package in your namespace. You`}{`’`}{`ll get the following acknowledgement:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: created package hellopackage\n`}</code></pre>\n    <p>{`You can now get a summary of the package:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package get --summary hellopackage`}</inlineCode></p>\n    <p>{`This produces the following result:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`package /<yourNamespace>/hellopackage\n   (parameters: none defined)\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-actions-to-a-package\"\n    }}>{`Adding actions to a package`}</h2>\n    <p>{`The package you created is empty; you haven`}{`’`}{`t added any actions yet. To add an action to the package, use the source code from the `}<inlineCode parentName=\"p\">{`hello`}</inlineCode>{` action created in `}<a parentName=\"p\" {...{\n        \"href\": \"../gettingstarted/deploy.md\",\n        \"title\": \"Deploying your first function\"\n      }}>{`Deploying your first Adobe I/O Runtime function`}</a>{`. Here is the code for that action:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`function main(params) {\n  return { payload: 'Hello ' + params.name };\n}\n`}</code></pre>\n    <p>{`Add this action to the package with the following command:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action create hellopackage/hello hello.js`}</inlineCode></p>\n    <p>{`Here`}{`’`}{`s the response from the CLI:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: created action hellopackage/hello\n`}</code></pre>\n    <p>{`This is just like creating an action by itself; you merely need to preface the action name with the name of the package you want to put it in. Note, however, that this isn`}{`’`}{`t the same action as the one you created from this code earlier; that earlier action exists in your namespace outside any package. You`}{`’`}{`ve just created a new action and stored it in the package. There`}{`’`}{`s no way to move an existing action into a package, or move an action from one package to another.`}</p>\n    <p>{`Now, if you get a summary again, you`}{`’`}{`ll see the following:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`package /<yourNamespace>/hellopackage\n   (parameters: none defined)\n action /<yourNamespace>/hellopackage/hello\n   (parameters: none defined)\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`You can`}{`’`}{`t add a package to a package; in other words, you can`}{`’`}{`t nest packages.`}</p>\n    <h2 {...{\n      \"id\": \"invoking-actions-in-a-package\"\n    }}>{`Invoking actions in a package`}</h2>\n    <p>{`Invoking an action is also straightforward; you just need to preface the action`}{`’`}{`s name with its package.`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action invoke --result hellopackage/hello --param name <your name>`}</inlineCode></p>\n    <p>{`You should get this output:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"payload\": \"Hello <your name>\"\n}\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"adding-parameters-to-a-package\"\n    }}>{`Adding parameters to a package`}</h2>\n    <p>{`Notice in the package summary the statements `}<inlineCode parentName=\"p\">{`(parameters: none defined)`}</inlineCode>{`. You can add default parameters to a package, and all entities in the package will inherit them:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package update hellopackage --param name Patricia`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: updated package hellopackage\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"default-params-and-encryption\"\n    }}>{`Default params and encryption`}</h3>\n    <p>{`Before we dive deeper in how to set and use default params, let’s discuss the security aspect first. Many developers use the default params as a mechanism to provision actions with the secrets/passwords needed to authenticate against some other systems (databases, services, APIs).`}</p>\n    <p>{`In order to support this use case, all default params are automatically encrypted. They are decrypted just before the action code is executed. Thus, the only time you have access to the decrypted value is while executing the action code.`}</p>\n    <p>{`If you run the CLI command for getting an action or package, you’d get a listing for the names of the default params while the values will be listed as a hash instead of the actual value.`}</p>\n    <p>{`You can see what parameters have been added to a package (note the `}<inlineCode parentName=\"p\">{`summary`}</inlineCode>{` flag is left out; you`}{`’`}{`ll get a complete report):`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package get hellopackage`}</inlineCode></p>\n    <p>{`In the response, you`}{`’`}{`ll see:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: got package hellopackage\n...\n\"parameters\": [\n    {\n        \"key\": \"name\",\n        \"value\": some_hash\n    }\n]\n...\n`}</code></pre>\n    <p>{`You can also verify that your actions inherit the parameters you set for the package:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action get hellopackage/hello`}</inlineCode></p>\n    <p>{`You`}{`’`}{`ll see in the response:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: got action hello\n...\n\"parameters\": [\n    {\n        \"key\": \"name\",\n        \"value\": some_hash\n    }\n]\n...\n`}</code></pre>\n    <p>{`If you get the package summmary again, you`}{`’`}{`ll see the default parameters listed:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`package /<yourNamespace>/hellopackage: Returns a result based on parameter name\n   (parameters: *name)\n action /<yourNamespace>/hellopackage/hello\n   (parameters: none defined)\n`}</code></pre>\n    <p>{`The asterisk next to `}{`“`}{`name`}{`”`}{` in the parameters list for the package indicates that it`}{`’`}{`s `}<em parentName=\"p\">{`bound`}</em>{` (see `}{`“`}{`Package bindings`}{`”`}{` below). A single asterisk denotes a parameter has a default value defined. A double asterisk denotes a parameter with a `}<em parentName=\"p\">{`finalized`}</em>{` default value: such values cannot be changed by the user.`}</p>\n    <p>{`Now, if you invoke the action without specifying any parameters, you can see that it inherits from the package`}{`’`}{`s parameters:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action invoke --result hellopackage/hello`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"payload\": \"Hello Patricia\"\n}\n`}</code></pre>\n    <p>{`Of course, you can also override those parameters by supplying your own values:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action invoke --result hellopackage/hello --param name Jennifer`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"payload\": \"Hello Jennifer\"\n}\n`}</code></pre>\n    <p>{`You can also override a package`}{`’`}{`s default parameters for a given action by setting default parameters specifically for that action:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action update hellopackage/hello --param name Christine`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: updated action hellopackage/hello\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"package-bindings\"\n    }}>{`Package bindings`}</h2>\n    <p>{`Depending on how you use your package, you may find you need to invoke an action with default parameters, without, or with a different set of default parameters. In such cases, rather than create a set of default parameters directly on the package, you can create a `}<em parentName=\"p\">{`package binding:`}</em>{` a named set of default parameters associated with a package.`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package bind hellopackage helloMyName --param name`}</inlineCode>{` `}<em parentName=\"p\"><inlineCode parentName=\"em\">{`<your name>`}</inlineCode></em></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: created binding helloMyName\n`}</code></pre>\n    <p>{`The package binding is a shortcut for `}{`“`}{`Call this package with these parameters.`}{`”`}{` Unlike setting default parameters on the package, this leaves the package itself (and its entities) open to be called without the parameters defined in the binding. It also leaves open the option to create another binding with another set of defaults. There`}{`’`}{`s no limit to the bindings you can create for a given package.`}</p>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`Package bindings are very useful for another reason: there`}{`’`}{`s no way to remove default parameters from a package or action once you`}{`’`}{`ve set them directly. Using bindings is the only way to preserve the option to call an action in the package without the defaults.`}</p>\n    <p>{`Each package binding is used as if it were a package itself. To call an action in the package associated with a given binding, use the name of the binding in your invocation instead of the name of the package:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action invoke --result helloMyName/hello`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"payload\": \"Hello Christine\"\n}\n`}</code></pre>\n    <InlineAlert slots=\"text\" mdxType=\"InlineAlert\" />\n    <p>{`The output above reads `}<inlineCode parentName=\"p\">{`Hello Christine`}</inlineCode>{` because we've defined a default value at the action level. This takes precedence over values set at the package level or invocation time. When you share a package, this ensures that your params can't be overwritten at execution time. However if you intend to let the user define its own values, then you shouldn't define a default value.`}</p>\n    <p>{`You can also substitute the name of the binding for the package name in other package commands:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package get --summary helloMyName`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"browsing-packages\"\n    }}>{`Browsing packages`}</h2>\n    <p>{`Over time, you`}{`’`}{`ll develop many packages, and you may want to see them all. Of course there`}{`’`}{`s a CLI command for this:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package list`}</inlineCode></p>\n    <p>{`This lists all the packages in the given namespace. Run it on yours now, and you should see both your package and the binding you created:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`packages\n/<yourNamespace>/hellopackage                                            private\n/<yourNamespace>/helloMyName                                             private\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"sharing-packages\"\n    }}>{`Sharing packages`}</h2>\n    <p>{`Once you`}{`’`}{`re sure your package is ready for others to use, you can share it. Notice that the packages listed when you browsed your namespace are shown as `}<inlineCode parentName=\"p\">{`private`}</inlineCode>{`; only you can see them. To share a package:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package update hellopackage --shared yes`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: updated package hellopackage\n`}</code></pre>\n    <p>{`You can easily verify your package is shared:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk package get hellopackage`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{}}>{`ok: got package hellopackage\n...\n\"publish\": true\n...\n`}</code></pre>\n    <p>{`If you list your packages again, the package you shared will be listed as such:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`packages\n/<yourNamespace>/hellopackage                                            shared\n/<yourNamespace>/helloMyName                                             private\n`}</code></pre>\n    <p>{`Others can now use your package just as you can, so long as you give them the fully qualified name of the package, including your namespace.`}</p>\n    <h2 {...{\n      \"id\": \"shared-packages-and-permissions\"\n    }}>{`Shared Packages and Permissions`}</h2>\n    <p>{`Shared packages enforce `}<inlineCode parentName=\"p\">{`execute-only`}</inlineCode>{` permission for any operation that is initiated from outside the namespace owning the package. Assuming there is a package `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{` in namespace `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{`, this package is shared, and there is a namespace `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{` who uses the shared package, then:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Invoking `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` actions from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`a`}</inlineCode>{` will work`}</li>\n      <li parentName=\"ul\">{`Trying to get `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` code or edit it (update/delete) from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` will fail`}</li>\n      <li parentName=\"ul\">{`Manage `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` (create/read/update/delete) will only work from namespace `}<inlineCode parentName=\"li\">{`a`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}