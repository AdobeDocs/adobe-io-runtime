{"version":3,"file":"component---src-pages-guides-using-logging-monitoring-md-45c9a17edbbaa82c3490.js","mappings":"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","sources":["webpack://adobe-io-runtime/./src/pages/guides/using/logging_monitoring.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"logging-and-monitoring\"\n    }}>{`Logging and Monitoring`}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`wsk`}</inlineCode>{` CLI offers a number of tools you can use to debug your actions while running them on Adobe I/O Runtime.`}</p>\n    <p>{`You can retrieve the latest activations in a namespace by running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation list\n`}</code></pre>\n    <p>{`Having an activation ID, you can retrieve the activation result running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation get <activation ID>\n`}</code></pre>\n    <p>{`If you send data to logs from your actions (using `}<inlineCode parentName=\"p\">{`console.log()`}</inlineCode>{` in your code), you`}{`’`}{`ll get this information as part of the activation record, inside the `}<inlineCode parentName=\"p\">{`logs`}</inlineCode>{` field. The shortcut command to get the logs is:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk activation logs <activation ID>\n//output sample\n2018-11-14T22:23:00.002Z       stdout: 1542234180001: param = John Doe\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"retrieving-activations-for-blocking-successful-calls\"\n    }}>{`Retrieving Activations for Blocking Successful Calls`}</h1>\n    <p>{`At scale, when you run millions of activations in a day, it may be difficult to extract the activations that failed in order to debug them. To help with this task, the system skips persisting the activation that succeeded. `}</p>\n    <p>{`The exceptions are asynchronous actions that are invoked in a non-blocking fashion. Their results are persisted regardless\nso that you can extract the response of the action at a later time. `}</p>\n    <p>{`However, during development it is important to have access to all activation results. You can enable this by setting in the request the extra logging header to `}<inlineCode parentName=\"p\">{`on`}</inlineCode>{`: `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`X-OW-EXTRA-LOGGING: on\n`}</code></pre>\n    <blockquote>\n      <p parentName=\"blockquote\">{`It's not recommended to use the extra logging headers in the production environment as invocation performance can be impacted. `}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"understanding-the-error-codes\"\n    }}>{`Understanding The Error Codes`}</h2>\n    <p>{`When you have action invocations that fail, sometimes the best way to understand the reason behind the failing is to take a look at the error object part of the activation record - running `}<inlineCode parentName=\"p\">{`wsk activation get <activationId>`}</inlineCode>{` you will get the activation record.`}</p>\n    <p>{`The following are the possible values and the meaning for `}<inlineCode parentName=\"p\">{`error`}</inlineCode>{` in `}<inlineCode parentName=\"p\">{`response.status`}</inlineCode>{`:`}</p>\n    <ul>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`success`}</inlineCode>{`: everything is okay (status is true)`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`action developer error`}</inlineCode>{`: A container or action code error occurred, e.g. failed to start action (status is false). This is usually the case if the nodejs action code has a syntax error or missing dependencies`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`application error`}</inlineCode>{`: Action ran, but there was an error thrown in the action code (deliberatly or not) that was handled by I/O Runtime (status is false).`}</li>\n      <li parentName=\"ul\"><inlineCode parentName=\"li\">{`whisk internal error`}</inlineCode>{`: Action did not run, an internal I/O Runtime system error occurred while starting the action, more info in `}<inlineCode parentName=\"li\">{`response.status.result.error`}</inlineCode></li>\n    </ul>\n    <h2 {...{\n      \"id\": \"3rd-party-tools\"\n    }}>{`3rd-Party Tools`}</h2>\n    <p>{`I/O Runtime doesn’t offer a configuration to send activations and logs to an external system, something like Splunk, Datadog or New Relic. This is something we are considering to offer in the future. `}</p>\n    <p>{`Although there is no out-of-the-box integration, there are still ways you can push data from I/O Runtime to an external tool in order to monitor and debug your actions. `}</p>\n    <h4 {...{\n      \"id\": \"epsagon\"\n    }}>{`Epsagon`}</h4>\n    <p>{`One tool that made it easy to do this is `}<a parentName=\"p\" {...{\n        \"href\": \"https://epsagon.com/?utm_source=adobe.io&utm_medium=referral&utm_campaign=adobe_io_docs\"\n      }}>{`Epsagon`}</a>{`. Epsagon built an integration for OpenWhisk based systems (I/O Runtime is built on top of the open source project OpenWhisk) that makes super easy to see your activations, errors, latency information and logs in their system. Check this `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.epsagon.com/docs/openwhisk?utm_source=adobe.io&utm_medium=referral&utm_campaign=adobe_io_docs\"\n      }}>{`guide`}</a>{` or this `}<a parentName=\"p\" {...{\n        \"href\": \"https://www.youtube.com/watch?v=4iprbivqrxQ&t=1517s\"\n      }}>{`video presentation`}</a>{` if you want to find more.`}</p>\n    <h4 {...{\n      \"id\": \"new-relic\"\n    }}>{`New Relic`}</h4>\n    <p>{`Another tool that can be used to monitor your actions is New Relic, which offers a Node.js agent that can be used to monitor your actions. Check this `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.newrelic.com/docs/agents/nodejs-agent/getting-started/introduction-new-relic-nodejs\"\n      }}>{`guide`}</a>{` to learn more.`}</p>\n    <p>{`For example if you want to send to New Relic the execution time for one action, you could build your action code as follows:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const newrelic = require('newrelic');\n\nfunction main(params) {\n    const start = Date.now();\n    \n    // your action code here\n    \n    const end = Date.now();\n    const durationInMilliseconds = end - start;\n    \n    // send duration to New Relic\n    newrelic.recordMetric('Custom/RunEndpointDuration', durationInMilliseconds);\n}\n`}</code></pre>\n    <p>{`You need to package the new relic agent as part of your action code and deploy the action as `}<a parentName=\"p\" {...{\n        \"href\": \"creating_actions#deploying-zip-actions\"\n      }}>{`.zip file`}</a>{`. `}</p>\n    <h2 {...{\n      \"id\": \"debugging-locally\"\n    }}>{`Debugging Locally`}</h2>\n    <p>{`Check this `}<a parentName=\"p\" {...{\n        \"href\": \"debugging.md\"\n      }}>{`page`}</a>{` if you want to learn how to debug your actions locally.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}