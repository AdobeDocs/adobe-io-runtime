{"version":3,"file":"component---src-pages-guides-reference-feeds-md-72c0752b82a692ce08f3.js","mappings":"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","sources":["webpack://adobe-io-runtime/./src/pages/guides/reference/feeds.md"],"sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n/* @jsx mdx */\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"using-feeds\"\n    }}>{`Using Feeds`}</h1>\n    <p>{`Feeds are streams of events. if you`}{`’`}{`ve reviewed `}<a parentName=\"p\" {...{\n        \"href\": \"triggersrules.md\",\n        \"title\": \"Using Triggers and Rules\"\n      }}>{`triggers`}</a>{`, you may wonder about the distinction between the two:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Triggers`}</strong>{` are a way to classify events: each trigger defines a type of event and is fired when that event is received by Runtime. Triggers are linked to actions by rules; each rule links a trigger to a single action.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Feeds`}</strong>{` are streams of events that are all handled by the same trigger. Each feed is controlled by a `}<em parentName=\"li\">{`feed action`}</em>{` that manages the stream: creating, deleting, pausing or resuming it as needed. In this way, a feed controls the flow of input to a trigger. Feed actions use a REST API to interact with external services that produce the events to which triggers are set to respond.`}</li>\n    </ul>\n    <h2 {...{\n      \"id\": \"creating-feeds-feed-actions\"\n    }}>{`Creating feeds: feed actions`}</h2>\n    <p>{`So, to create a feed, you first need a feed action. A feed action is an action, just like any other, but to qualify as a feed action, it needs to accept the following parameters:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`lifecycleEvent:`}</strong>{` passes in commands to control the feed: `}<inlineCode parentName=\"li\">{`CREATE`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`READ`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`DELETE`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`PAUSE`}</inlineCode>{`, OR `}<inlineCode parentName=\"li\">{`UNPAUSE`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`triggerName:`}</strong>{` provides the fully qualified name of the trigger to associate with this feed.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`authKey:`}</strong>{` the Basic auth credentials of the user who owns the trigger given in `}<inlineCode parentName=\"li\">{`triggerName`}</inlineCode>{`.`}</li>\n    </ul>\n    <p>{`Beyond these parameters, the feed action can take any others you choose; these should include the parameters needed to connect to the event source and manage the feed.`}</p>\n    <p>{`Once you've got the feed action, you create the feed when you create the trigger itself, simply by using the --feed parameter. For example, let's assume you want to set up a feed for receiving updates to the user's location coming from your mobile app, and you`}{`’`}{`ve created a feed action named `}<inlineCode parentName=\"p\">{`userLocChange`}</inlineCode>{` in a package in your namespace called `}<inlineCode parentName=\"p\">{`userLoc`}</inlineCode>{`. To create the feed for managing location updates, you could issue the following command in the CLI:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk trigger create trigLocUpdate --feed userLoc/userLocChange <optional parameters for the feed action>`}</inlineCode></p>\n    <p>{`This command creates a trigger named `}<inlineCode parentName=\"p\">{`trigLocUpdate`}</inlineCode>{` and then do something like this:`}</p>\n    <p><inlineCode parentName=\"p\">{`wsk action invoke userLoc/userLocChange --param lifecycleEvent CREATE --param triggerName trigLocUpdate --param authKey <yourauthKey> --param <optional parameters>`}</inlineCode></p>\n    <p>{`This invokes the feed action `}<inlineCode parentName=\"p\">{`userLocChange`}</inlineCode>{`, which then sets up the stream of events from your mobile app aimed at the trigger `}<inlineCode parentName=\"p\">{`trigLocUpdate`}</inlineCode>{`.`}</p>\n    <p>{`You can use the `}<inlineCode parentName=\"p\">{`--feed`}</inlineCode>{` parameter to execute similar functions on feed actions within the `}<inlineCode parentName=\"p\">{`wsk trigger delete`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`wsk trigger update`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`wsk trigger get`}</inlineCode>{` commands.`}</p>\n    <h2 {...{\n      \"id\": \"feed-implementation-patterns\"\n    }}>{`Feed implementation patterns`}</h2>\n    <p>{`You can create a feed according to several different architectural patterns. Three of the best choices are:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Hooks:`}</strong>{` This is the easiest option, if your event source offers a webhook facility. Simply set up the webhook to send an HTML POST directly to a URL to fire the trigger. This works best for low-frequency events.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Polling:`}</strong>{` This is good for managing a regularly scheduled event, so long as it`}{`’`}{`s not too frequent. Set up the feed action to poll an endpoint periodically to fetch new data.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`Connections:`}</strong>{` Sometimes, the volume and frequency of events makes it most efficient to set up a persistent connection. This is complicated, though, by the fact that Runtime is architected as a REST service and that each invocation of an action is destroyed as soon as it's executed; in other words, Runtime is by nature not persistent. Here, you would set up an external service to maintain a persistent connection with your event source, and that service would then fire events at your feed in Runtime.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","_ref","components","props","_objectWithoutPropertiesLoose","_excluded","mdx","_extends","mdxType","parentName","isMDXComponent"],"sourceRoot":""}