{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/reference/packages.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"oTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,yBADR,0BAGA,yWACA,oDACA,qBAAK,iBAAMC,WAAW,OAAjB,4CAEL,4IACA,qBAAK,iBAAMA,WAAW,OAAjB,2CAEL,8MAA+L,uBAAYA,WAAW,KAAvB,QAA/L,4BAA2Q,uBAAYA,WAAW,KAAvB,cAA3Q,MACA,qBAAK,iBAAMA,WAAW,OAAjB,qEAEL,+HAAgH,uBAAYA,WAAW,KAAvB,UAAhH,MACA,qBAAK,iBAAMA,WAAW,OAAjB,0DAEL,wHAAyG,uBAAYA,WAAW,KAAvB,oBAAzG,yBAA8L,uBAAYA,WAAW,KAAvB,cAA9L,8GACA,qBAAK,iBAAMA,WAAW,OAAjB,0FAEL,eACE,GAAM,mCADR,oCAGA,8CAA+B,uBAAYA,WAAW,KAAvB,gBAA/B,+HAAsN,uBAAYA,WAAW,KAAvB,cAAtN,kBAA8R,uBAAYA,WAAW,KAAvB,KAA9R,uDAAkY,uBAAYA,WAAW,KAAvB,KAAlY,wCACA,oBACE,eAAIA,WAAW,MAAf,aAAiC,uBAAYA,WAAW,MAAvB,cAAjC,4BAAoH,uBAAYA,WAAW,MAAvB,KAApH,QAA0K,uBAAYA,WAAW,MAAvB,KAA1K,eACA,eAAIA,WAAW,MAAf,kBAAsC,uBAAYA,WAAW,MAAvB,cAAtC,oDAAiJ,uBAAYA,WAAW,MAAvB,KAAjJ,eACA,eAAIA,WAAW,MAAf,WAA+B,uBAAYA,WAAW,MAAvB,cAA/B,+DAAqJ,uBAAYA,WAAW,MAAvB,QAM3JJ,EAAWK,gBAAiB","file":"component---src-pages-guides-reference-packages-md-d8cc68329cf00c0a1605.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"working-with-packages\"\n    }}>{`Working with packages`}</h1>\n    <p>{`Packages are a simple and yet important concept in I/O Runtime. You can use packages to handle versioning (deploy new version of your actions in a new package), create different actions with the same name within the same namespace, group together actions that are related, share actions with other parties (shared packages) and much more.`}</p>\n    <p>{`You create a package running:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk package create my-fancy-package \n`}</code></pre>\n    <p>{`When deleting an package, it will only work if the package is empty (no actions or triggers have been defined in it):`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`wsk package delete my-fancy-package\n`}</code></pre>\n    <p>{`Another useful feature is defining default params at the package level. All the actions defined in that package will be able to read the default params. In this example a param called `}<inlineCode parentName=\"p\">{`name`}</inlineCode>{` is set, with the value `}<inlineCode parentName=\"p\">{`some-value`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ wsk package update my-fancy-package --param name some-value\n`}</code></pre>\n    <p>{`Sharing a package (making it available to any other user of the system) is as simple as adding this flag `}<inlineCode parentName=\"p\">{`shared`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ wsk package update my-fancy-package --shared yes\n`}</code></pre>\n    <p>{`If you want to use a shared package, you need first to bind it. In the following example, we bind `}<inlineCode parentName=\"p\">{`my-fancy-package`}</inlineCode>{` to a package called `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{`. This enables you to invoke any action defined in the original namespace as being part of bound package.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`$ wsk package bind /namespace-where-package-is-defined/my-fancy-package my-package\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"shared-packages-and-permissions\"\n    }}>{`Shared Packages and Permissions`}</h2>\n    <p>{`Shared packages enforce `}<inlineCode parentName=\"p\">{`execute-only`}</inlineCode>{` permission for any operation that is initiated from outside the namespace owning the package. Assuming there is a package `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{` in namespace `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{`, this package is shared, and there is a namespace `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{` who uses the shared package, then:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Invoking `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` actions from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`a`}</inlineCode>{` will work`}</li>\n      <li parentName=\"ul\">{`Trying to get `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` code or edit it (update/delete) from namespace `}<inlineCode parentName=\"li\">{`b`}</inlineCode>{` will fail`}</li>\n      <li parentName=\"ul\">{`Manage `}<inlineCode parentName=\"li\">{`my-package`}</inlineCode>{` (create/read/update/delete) will only work from namespace `}<inlineCode parentName=\"li\">{`a`}</inlineCode></li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}