{"version":3,"sources":["webpack://dev-site-documentation-template/./src/pages/guides/reference/sequences_compositions.md"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"mTAQaA,EAAe,GACtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGX,IAFFC,EAEC,EAFDA,WACGC,GACF,YACD,OAAO,SAACJ,GAAD,UAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,eAG5E,eACE,GAAM,8BADR,+BAGA,8JACA,8SACA,6PACA,eACE,GAAM,aADR,cAGA,qFAAsE,uBAAYC,WAAW,KAAvB,cAAtE,MACA,qBAAK,iBAAMA,WAAW,OAAjB,gDAGL,0DAA2C,uBAAYA,WAAW,KAAvB,cAA3C,4MACF,uBAAYA,WAAW,KAAvB,uHACE,6EACF,uBAAYA,WAAW,KAAvB,2CACE,eACE,GAAM,yBADR,0BAGA,oRACA,6EAA8D,uBAAYA,WAAW,KAAvB,WAA9D,SAA0H,uBAAYA,WAAW,KAAvB,WAA1H,yGAAsR,uBAAYA,WAAW,KAAvB,cAAtR,kEACA,8MAA+L,uBAAYA,WAAW,KAAvB,WAA/L,+FAAiV,cAAGA,WAAW,IAC3V,KAAQ,mCADqU,QAAjV,MAGA,+DAAgD,cAAGA,WAAW,IAC1D,KAAQ,uGADoC,gCAAhD,MAGA,eACE,GAAM,gBADR,iBAGA,gfACA,eACE,GAAM,oBADR,qBAGA,wGACA,qBAAK,iBAAMA,WAAW,OAAjB,yCAEL,0JACA,oBACE,eAAIA,WAAW,MAAf,iDACA,eAAIA,WAAW,MAAf,YAAgC,uBAAYA,WAAW,MAAvB,WAAhC,mEACA,eAAIA,WAAW,MAAf,YAAgC,uBAAYA,WAAW,MAAvB,UAAhC,+FAEF,uFAAwE,uBAAYA,WAAW,KAAvB,KAAxE,MAA2H,uBAAYA,WAAW,KAAvB,KAA3H,UAAkL,uBAAYA,WAAW,KAAvB,KAAlL,wDAAuR,uBAAYA,WAAW,KAAvB,KAAvR,sCAA0W,uBAAYA,WAAW,KAAvB,KAA1W,yBAAgb,uBAAYA,WAAW,KAAvB,KAAhb,mGACA,qBAAK,iBAAMA,WAAW,OAAjB,qGAIL,6HACA,qBAAK,iBAAMA,WAAW,OAAjB,uCAEL,sCACA,qBAAK,iBAAMA,WAAW,OAAjB,uCAEL,wDAAyC,uBAAYA,WAAW,KAAvB,gBAAzC,iDAAkJ,uBAAYA,WAAW,KAAvB,kCAAlJ,qCAAiQ,uBAAYA,WAAW,KAAvB,KAAjQ,0BAAwU,uBAAYA,WAAW,KAAvB,KAAxU,iCAAsZ,uBAAYA,WAAW,KAAvB,KAAtZ,gCAAme,uBAAYA,WAAW,KAAvB,KAAne,iBACA,wCACA,oBACE,eAAIA,WAAW,MAAf,8BAAkD,cAAGA,WAAW,KAC5D,KAAQ,0DADsC,eAGlD,eAAIA,WAAW,MAAf,uEAA2F,cAAGA,WAAW,KACrG,KAAQ,0FAD+E,eAA3F,OAIF,eACE,GAAM,yBADR,0BAGA,8EAKJJ,EAAWK,gBAAiB","file":"component---src-pages-guides-reference-sequences-compositions-md-5e114dd72cb9fe44b7d0.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/adobe-io-runtime/adobe-io-runtime/node_modules/@adobe/gatsby-theme-aio/src/components/MDXFilter/index.js\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"sequences-and-compositions\"\n    }}>{`Sequences and Compositions`}</h1>\n    <p>{`Sometimes you want to orchestrate a series of action calls into a flow. There are two ways to do this: using sequences or compositions.`}</p>\n    <p>{`Sequences represent a single string of actions that are invoked in sequence, starting with the first one, then second, and so forth until the last one. At each step the result of the current action feeds into the arguments of the next one. There is no support to skip one action.`}</p>\n    <p>{`If you want to execute a tree of actions, where you want to be able to evaluate the result of an action and depending on it execute a different action (think of an if/else control structure) then compositions are your best friend.`}</p>\n    <h2 {...{\n      \"id\": \"sequences\"\n    }}>{`Sequences`}</h2>\n    <p>{`Assuming that you have two actions created in a package called `}<inlineCode parentName=\"p\">{`my-package`}</inlineCode>{`:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`/my-package/actionA\n/my-package/actionB\n`}</code></pre>\n    <p>{`You can create a sequence using the `}<inlineCode parentName=\"p\">{`--sequence`}</inlineCode>{` flag in addition to the usual command for creating an action (make sure you add the namespace to the action name; otherwise you'd see an error about not being authorized to access those resources):\n`}<inlineCode parentName=\"p\">{`wsk action create mySequence --sequence /[your-namespace]/my-package/actionA,/[your-namespace]/my-package/actionB`}</inlineCode></p>\n    <p>{`You can invoke this as any other action. For example:\n`}<inlineCode parentName=\"p\">{`wsk action invoke --result mySequence`}</inlineCode></p>\n    <h3 {...{\n      \"id\": \"sequences-and-timeout\"\n    }}>{`Sequences and Timeout`}</h3>\n    <p>{`When invoking a sequence in a blocking manner, there is a hard limit for timeout and this limit can't be changed: 60 seconds. It means when you add up the execution time of each action that is part of a sequence, the total has to be 60 seconds or less. `}</p>\n    <p>{`If we apply this limitation to the example above, then `}<inlineCode parentName=\"p\">{`actionA`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`actionB`}</inlineCode>{` have a total budget of 60 seconds. Although the system lets you set a higher timeout on the sequnce `}<inlineCode parentName=\"p\">{`mySequence`}</inlineCode>{`, this value is ignored and the 60 seconds limit is enforced.`}</p>\n    <p>{`If one of your actions needs more than 60 seconds, then the only solution is to invoke a non-blocking action using the OpenWhisk npm module. So, using the same example, you could have `}<inlineCode parentName=\"p\">{`actionA`}</inlineCode>{` calling another action in a non-blocking manner. You can see an example of how to do this `}<a parentName=\"p\" {...{\n        \"href\": \"../guides/asynchronous_calls.md\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`You can read more about sequences on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/apache/incubator-openwhisk/blob/master/docs/actions.md#creating-action-sequences\"\n      }}>{`OpenWhisk documentation page`}</a>{`.`}</p>\n    <h2 {...{\n      \"id\": \"compositions\"\n    }}>{`Compositions`}</h2>\n    <p>{`When you want to orchestrate a more complex flow without having to jam all the code in one action, Apache OpenWhisk Composer is your best friend. Composer lets you assemble actions, even other compositions together and control the executions by using control-flow structure (if, while, repeat). The result of a composition gives you a single entry point and it behaves like an action, in that it supports default params, can be placed into a package, or used as web action.`}</p>\n    <h3 {...{\n      \"id\": \"install-composer\"\n    }}>{`Install Composer`}</h3>\n    <p>{`You’ll need to install the Composer Node.js package in order to use this feature:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`npm install -g openwhisk-composer\n`}</code></pre>\n    <p>{`Using this package you can create the JSON file needed for deploying a composition. The flow for creating a composition looks like:`}</p>\n    <ol>\n      <li parentName=\"ol\">{`You define the compositions using JavaScript`}</li>\n      <li parentName=\"ol\">{`You run `}<inlineCode parentName=\"li\">{`compose`}</inlineCode>{` command to generate the JSON file out of this JavaScript file`}</li>\n      <li parentName=\"ol\">{`You run `}<inlineCode parentName=\"li\">{`deploy`}</inlineCode>{` command to deploy the composition using the JSON file you generated at the previous step`}</li>\n    </ol>\n    <p>{`For, example let’s assume you have three actions deployed called `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`c`}</inlineCode>{` and you want to create a composition that executes `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` and in case of success, executes `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{`, if not it executes `}<inlineCode parentName=\"p\">{`c`}</inlineCode>{`. You use the composer package to define this composition in a JavaScript file (\\`myComp.js'): `}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`const composer = require('openwhisk-composer')\n\nmodule.exports = composer.if(‘a’, ‘b’, ‘c’)\n`}</code></pre>\n    <p>{`Now, that you have the composition defined you can generate the JSON definition needed for deployment:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`compose myComp.js > myComp.json\n`}</code></pre>\n    <p>{`Time to deploy:`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`deploy compositionA myComp.json\n`}</code></pre>\n    <p>{`This creates a composition called `}<inlineCode parentName=\"p\">{`compositionA`}</inlineCode>{`. You can invoke this, as any other action - `}<inlineCode parentName=\"p\">{`wsk action invoke compositionA`}</inlineCode>{`. When you do this, first action `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` is invoked. Then, if `}<inlineCode parentName=\"p\">{`a`}</inlineCode>{` was successful, then action `}<inlineCode parentName=\"p\">{`b`}</inlineCode>{` is invoked; if not, action `}<inlineCode parentName=\"p\">{`c`}</inlineCode>{` is invoked.`}</p>\n    <p>{`More information:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Apache OpenWhisk Composer `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/apache/incubator-openwhisk-composer\"\n        }}>{`home page`}</a></li>\n      <li parentName=\"ul\">{`For a complete list of the control-flow structure check this page: `}<a parentName=\"li\" {...{\n          \"href\": \"https://github.com/apache/incubator-openwhisk-composer/blob/master/docs/COMBINATORS.md\"\n        }}>{`Combinators`}</a>{`.`}</li>\n    </ul>\n    <h3 {...{\n      \"id\": \"parallel-compositions\"\n    }}>{`Parallel Compositions`}</h3>\n    <p>{`Parallel compositions are not supported by I/O Runtime.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}